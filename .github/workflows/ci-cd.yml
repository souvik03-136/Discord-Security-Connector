name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  DOCKER_IMAGE: discord-security-connector

jobs:
  # Build and test on all platforms
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: macos-latest
            platform: darwin/amd64
          - os: windows-latest
            platform: windows/amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go build -o bin/discord-security-connector.exe ./cmd/server
        else
          go build -o bin/discord-security-connector ./cmd/server
        fi

    - name: Run linter
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run ./...

    - name: Security scan
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

  # Docker build and push
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployments/docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        # Add your deployment script here
        echo "Deploying to staging environment"
        # Example: ./scripts/deploy.sh staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}

  # Deploy to production (manual trigger)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    # This workflow will only run when manually triggered
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        # Add your deployment script here
        echo "Deploying to production environment"
        # Example: ./scripts/deploy.sh production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}